#!/bin/bash

SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"
GITROOT="${SCRIPTPATH}"
COMPOSE_FILE=/opt/flotilla/docker-compose.yml

if [ -s "${GITROOT}/scripts/sys_lib.sh" ]; then
    SCRIPTS="${GITROOT}/scripts"
else
    SCRIPTS="/usr/local/lib/flotilla/scripts"
fi

source "${SCRIPTS}/sys_lib.sh"

flotilla_firewall="firewalld"
flotilla_inet_iface="$(route | grep '^default' | grep -o '[^ ]*$')"

case "$1" in
    "install" | "in" | "i")
        "${SCRIPTS}/sys_install.sh"
        ;;
    "update" | "up" | "u")
        "${SCRIPTS}/sys_update.sh"
        ;;
    "start")
        elevate systemctl start flotilla.service
        ;;
    "stop")
        elevate systemctl stop flotilla.service
        ;;
    "restart")
        flotilla stop
        flotilla start
        ;;
    "status" | "stat")
        elevate systemctl status flotilla.service
        elevate journalctl -f -u flotilla.service
        ;;
    "follow" | "f")
        #elevate journalctl -f -u flotilla.service
        docker-compose --file "${COMPOSE_FILE}" logs --follow
        ;;
    "ovpn")
        # NOTE: OpenVPN must be running?
        case "$2" in
            "generate")
                docker-compose --file "${COMPOSE_FILE}" run --rm openvpn easyrsa build-client-full $3 nopass
                docker-compose --file "${COMPOSE_FILE}" run --rm openvpn ovpn_getclient "$3" > "$3.ovpn"
                ;;
            "get")
                docker-compose --file "${COMPOSE_FILE}" run --rm openvpn ovpn_getclient "$3" > "$3.ovpn"
                ;;
            "revoke")
                docker-compose --file "${COMPOSE_FILE}" run --rm openvpn ovpn_revokeclient "$3"
                ;;
            "remove")
                docker-compose --file "${COMPOSE_FILE}" run --rm openvpn ovpn_revokeclient "$3" remove
                ;;
            "list")
                docker-compose --file "${COMPOSE_FILE}" run --rm openvpn ovpn_listclients
                ;;
            #"backup")
                #docker-compose --file "${COMPOSE_FILE}" run --rm openvpn tar -cvf - -C /etc openvpn | xz > openvpn-backup.tar.xz
                #;;
            *)
                echo "Usage: flotilla ovpn <generate | get | revoke | remove | list>"
                ;;
        esac
        ;;
    "ips")
        case "$2" in
            "test")
                elevate suricata -T -c /etc/suricata/suricata.yaml
                if [[ "$?" -ne 0 ]]; then
                    exit 1
                fi
                ;;
            "up")
                #flotilla ips test
                #if [[ "$?" -ne 0 ]]; then
                    #exit 1
                #fi

                elevate systemctl start suricata.service

                # NOTE: Dangerous! Can disrupt the SSH connection if Suricata fails.
                #elevate iptables -A INPUT -j NFQUEUE
                #elevate iptables -A OUTPUT -j NFQUEUE
                ;;
            "down")
                #elevate iptables -D INPUT -j NFQUEUE
                #elevate iptables -D OUTPUT -j NFQUEUE
                elevate systemctl stop suricata.service
                ;;
            "update")
                elevate suricata-update
                ;;
            "status")
                elevate systemctl status suricata.service
                elevate journalctl -f -u suricata.service
                ;;
            *)
                echo "Usage: flotilla ips <test | up | down | update | status>"
                ;;
        esac
        ;;
    "fw")
        case "$2" in
            "status")
                if [[ "${flotilla_firewall}" == "ufw" ]]; then
                    sudo ufw status verbose # numbered
                elif [[ "${flotilla_firewall}" == "firewalld" ]]; then
                    sudo firewall-cmd --state
                fi
                ;;
            "enable")
                if [[ "${flotilla_firewall}" == "ufw" ]]; then
                    sudo systemctl stop firewalld
                    sudo systemctl disable firewalld
                    sudo systemctl enable ufw
                    sudo systemctl start ufw
                    sudo ufw enable
                elif [[ "${flotilla_firewall}" == "firewalld" ]]; then
                    sudo ufw disable
                    sudo systemctl stop ufw
                    sudo systemctl disable ufw
                    sudo systemctl enable firewalld
                    sudo systemctl start firewalld
                fi
                ;;
            "disable")
                if [[ "${flotilla_firewall}" == "ufw" ]]; then
                    sudo systemctl stop ufw
                    sudo systemctl disable ufw
                    sudo systemctl enable firewalld
                    sudo systemctl start firewalld
                    sudo ufw disable
                elif [[ "${flotilla_firewall}" == "firewalld" ]]; then
                    sudo systemctl stop firewalld
                    sudo systemctl disable firewalld
                    sudo systemctl enable ufw
                    sudo systemctl start ufw
                    sudo ufw enable
                fi
                ;;
            "update")
                if [[ "${flotilla_firewall}" == "ufw" ]]; then
                    sudo ufw reset
                    sudo ufw default allow outgoing
                    sudo ufw default deny incoming
                    #sudo ufw default allow incoming from 192.168.0.0/16
                    #sudo ufw default allow incoming from 172.16.0.0/12
                    #sudo ufw default allow incoming from 10.0.0.0/8
                    sudo ufw logging on
                    sudo ufw allow 22/tcp       # SSH
                    sudo ufw limit 22/tcp
                    sudo ufw allow 25/tcp       # SMTP
                    sudo ufw allow 53           # DNS
                    sudo ufw allow 67/udp       # DHCP
                    sudo ufw allow 80           # HTTP
                    sudo ufw allow 443          # HTTPS
                    sudo ufw allow 1194/udp     # OpenVPN
                    sudo ufw allow 6881         # QBittorrent
                    sudo ufw allow 25565        # Minecraft
                    sudo ufw allow 27015        # Steam
                    sudo ufw allow 51820        # Wireguard
                    sudo ufw allow 18080        # Monero Daemon
                    sudo ufw allow 18081        # Monero Daemon
                elif [[ "${flotilla_firewall}" == "firewalld" ]]; then
                    fw_arg_all="--permanent"
                    echo "Configuring firewall for for ${flotilla_inet_iface} in zone \"public\" ..."
                    sudo firewall-cmd "${fw_arg_all}" --set-default-zone=public # Can now skip adding --zone=public to all commands.
                    sudo firewall-cmd "${fw_arg_all}" --change-interface="${flotilla_inet_iface}"
                    # Fix after upgrading from 31->33, Firewalld changes to iptables
                    # require us to do this so Docker containers can communicate to
                    # each other.
                    sudo firewall-cmd --zone=public --add-masquerade --permanent

                    ##sudo firewall-cmd --add-interface="docker0"

                    ## Recreate the Docker filtration chain.
                    #sudo firewall-cmd --direct --remove-chain ipv4 filter DOCKER-USER
                    #sudo firewall-cmd --direct --remove-rules ipv4 filter DOCKER-USER
                    #sudo firewall-cmd --direct --add-chain ipv4 filter DOCKER-USER

                    ## Setup basic Docker rules.
                    #sudo firewall-cmd --direct --add-rule ipv4 filter DOCKER-USER 0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT -m comment --comment "This allows docker containers to connect to the outside world."
                    #sudo firewall-cmd --direct --add-rule ipv4 filter DOCKER-USER 0 -j RETURN -s 172.18.0.0/16 -m comment --comment "Allow internal docker communication."
                    #sudo firewall-cmd --direct --add-rule ipv4 filter DOCKER-USER 0 -j INPUT_ZONES -m comment --comment "Filter by firewalld rules."

                    ## Add any externally accessible rules.
                    ##sudo firewall-cmd --direct --add-rule ipv4 filter DOCKER-USER 0 -p tcp -m multiport --dports https -s 123.456.7.89/32 -j ACCEPT -m comment --comment "my allowed ip address to http and https ports"

                    ## Reject all other traffic.
                    #sudo firewall-cmd --direct --add-rule ipv4 filter DOCKER-USER 0 -j REJECT -m comment --comment "Reject all other traffic."

                    sudo firewall-cmd "${fw_arg_all}" --remove-service=mdns
                    sudo firewall-cmd "${fw_arg_all}" --add-service=ssh
                    sudo firewall-cmd "${fw_arg_all}" --add-service=smtp
                    sudo firewall-cmd "${fw_arg_all}" --add-service=dns
                    sudo firewall-cmd "${fw_arg_all}" --add-service=dhcp
                    sudo firewall-cmd "${fw_arg_all}" --add-service=http
                    sudo firewall-cmd "${fw_arg_all}" --add-service=https
                    sudo firewall-cmd "${fw_arg_all}" --add-service=openvpn

                    # QBittorrent
                    sudo firewall-cmd "${fw_arg_all}" --add-port=6881/tcp
                    sudo firewall-cmd "${fw_arg_all}" --add-port=6881/udp

                    # Minecraft
                    sudo firewall-cmd "${fw_arg_all}" --add-port=25565/tcp
                    sudo firewall-cmd "${fw_arg_all}" --add-port=25565/udp

                    # Steam
                    sudo firewall-cmd "${fw_arg_all}" --add-port=27015/tcp
                    sudo firewall-cmd "${fw_arg_all}" --add-port=27015/udp

                    # Wireguard
                    sudo firewall-cmd "${fw_arg_all}" --add-port=51820/tcp
                    sudo firewall-cmd "${fw_arg_all}" --add-port=51820/udp

                    # Monero Daemon
                    sudo firewall-cmd "${fw_arg_all}" --add-port=18080/tcp
                    sudo firewall-cmd "${fw_arg_all}" --add-port=18080/udp
                    sudo firewall-cmd "${fw_arg_all}" --add-port=18081/tcp
                    sudo firewall-cmd "${fw_arg_all}" --add-port=18081/udp

                    #sudo firewall-cmd --reload
                fi
                ;;
            *)
                echo "Usage: flotilla fw <status | enable | disable | update>"
                ;;
        esac
        ;;
    *)
        echo "Usage: flotilla <install | update | start | stop | restart | status | follow | ovpn | ips | fw>"
        ;;
esac
