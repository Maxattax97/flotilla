---
version: "3.7"
# Services:
  # Jenkins
  # Blog
  # Mayan
  # Email server
  # Joplin
  # Searx https://github.com/linuxserver/Heimdall/issues/307
  # PrivateBin
  # Syncthing?
  # EteSync?
  # Bitwarden?
  # Mining operation?
  # Squid Proxy? Shadowsocks? Or other proxy
  # IRC
  # TOR Node, hidden service
  # i2p
  # KVM?
  # LDAP?
  # Matomo
  # GraphHopper
# Organization
  # TODO: Apply consistent port assignment scheme.
  # TODO: Segregate services into subnetworks.
# Security
  # :Z is private Docker share (guarded by SELinux); these files are for that
  # container only.
  # :z is public Docker share (guarded by SELinux); these files are for several
  # containers to share.
services:

  letsencrypt:
    image: linuxserver/letsencrypt
    container_name: letsencrypt
    cap_add:
      - NET_ADMIN
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
      - URL=maxocull.com
      - SUBDOMAINS=www,resolute,whoami,dash,cloud,git,dns,office,lidarr,sonarr,radarr,media,torrent,jackett,ci,grafana,search,map,pgadmin,prometheus,portainer,registry,librarian,books,doc,analytics
      - VALIDATION=http # DNS? so can use wildcards
      #- DNSPLUGIN=cloudflare #optional
      #- DUCKDNSTOKEN=<token> #optional
      - EMAIL=max.ocull@protonmail.com
      - DHLEVEL=2048
      - ONLY_SUBDOMAINS=false
      - EXTRA_DOMAINS=maxocull.net,www.maxocull.net,resolute.maxocull.net,whoami.maxocull.net,dash.maxocull.net,cloud.maxocull.net,git.maxocull.net,dns.maxocull.net,office.maxocull.net,lidarr.maxocull.net,sonarr.maxocull.net,radarr.maxocull.net,media.maxocull.net,torrent.maxocull.net,jackett.maxocull.net,ci.maxocull.net,grafana.maxocull.net,search.maxocull.net,map.maxocull.net,pgadmin.maxocull.net,prometheus.maxocull.net,portainer.maxocull.net,registry.maxocull.net,librarian.maxocull.net,books.maxocull.net,doc.maxocull.net,analytics.maxocull.net
      - STAGING=false # Enable when testing.
    volumes:
      - /opt/flotilla/data/letsencrypt/keys:/config/etc/letsencrypt:Z
      - /opt/flotilla/data/letsencrypt/www:/config/www:Z
      - /opt/flotilla/config/letsencrypt:/config:z
      - /opt/flotilla/data/all/logs/letsencrypt:/config/log:z
    ports:
      - "80:80"
      - "443:443"
    #deploy:
      #resources:
        #limits:
          #memory: "1g"
    restart: unless-stopped

  weblog:
    image: node:lts
    container_name: weblog
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
    working_dir: /weblog
    command: "npm run serve"
    volumes:
      - /opt/flotilla/data/weblog:/weblog:z
    ports:
      - "127.0.0.1:4000:4000"
    restart: unless-stopped

  dockersocket:
    # Limits access to the docker socket which is dangerous to expose to
    # containers which see the internet; compromise of these external facing
    # containers could mean granting root access to the entire host (and all
    # other containers).
    image: tecnativa/docker-socket-proxy
    container_name: dockersocket
    privileged: true # Necessary for docker access.
    ports:
      - "127.0.0.1:2375:2375"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
      - LOG_LEVEL=debug # info
      #- EVENTS=1
      #- PING=1
      #- VERSION=1
      - AUTH=0 # Security critical
      - SECRETS=0 # Security critical
      - POST=0 # Security critical
      #- BUILD=1
      #- COMMIT=1
      #- CONFIGS=1
      - CONTAINERS=1 # For Traefik
      #- DISTRIBUTION=1
      #- EXEC=1
      #- IMAGES=1
      #- INFO=1
      - NETWORKS=1 # For Traefik
      #- NODES=1
      #- PLUGINS=1
      - SERVICES=1 # For Traefik
      #- SESSION=1
      #- SWARM=1
      #- SYSTEM=1
      #- VOLUMES=1
      - TASKS=1 # For Traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - 'traefik.enable=false'
    restart: unless-stopped

  #traefik:
    ## Reverse proxy with auto-routing capabilities. Aimed at HTTP/S but works
    ## with TCP too.
    #image: traefik
    #container_name: traefik
    #command:
      ##- "--configFile=/etc/traefik/traefik.toml"
      #- "--api.insecure=true" # TODO: Change this back.
      #- "--ping"
      #- "--providers.docker=true"
      #- "--providers.docker.endpoint=tcp://dockersocket:2375"
      #- "--providers.docker.defaultRule=Host(`{{ normalize .Name }}.maxocull.com`)"
      #- "--providers.docker.exposedByDefault=true"
      #- "--providers.docker.useBindPortIp=false"
      ##- "--log.filePath=/var/log/traefik.log"
      #- "--log.level=DEBUG"
      #- "--accessLog.filePath=/var/log/access.log"
      #- "--metrics.prometheus"
      #- "--global.sendAnonymousUsage=false"
      #- "--global.checkNewVersion=true"
      #- "--entrypoints.http.address=:80"
      #- "--entrypoints.https.address=:443"
      #- "--entrypoints.traefik.address=:8080"
      #- "--certificatesResolvers.le-main.acme.email=max.ocull@protonmail.com"
      #- "--certificatesResolvers.le-main.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory" # Staging server for testing.
      ##- "--certificatesResolvers.le-main.acme.storage=/var/acme/acme.json"
      #- "--certificatesResolvers.le-main.acme.tlsChallenge=true"
      ##- "--certificatesResolvers.le-main.acme.httpChallenge=true"
      ##- "--certificatesResolvers.le-main.acme.httpChallenge.entryPoint=http"
    #ports:
      #- "80:80"
      #- "8080:8080"
    #environment:
      #- PUID=1000
      #- PGID=1000
      #- TZ=America/Indianapolis
      ##- DOCKER_HOST=tcp://dockersocket
    #volumes:
      #- /opt/flotilla/data/traefik:/var/acme:z
      #- /opt/flotilla/config/traefik:/etc/traefik:z
      #- /opt/flotilla/data/all/logs/traefik:/var/log:z
    #restart: unless-stopped

  whoami:
    image: containous/whoami
    container_name: whoami
    ports:
      - "127.0.0.1:8001:80"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
      ##- DOCKER_HOST=tcp://dockersocket
    #deploy:
      #resources:
        #limits:
          #memory: "40m"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.http-whoami.rule=Host(`whoami.maxocull.com`)"
      - "traefik.http.routers.http-whoami.entryPoints=http"
      - "traefik.http.routers.https-whoami.rule=Host(`whoami.maxocull.com`)"
      - "traefik.http.routers.https-whoami.entryPoints=https"
      - "traefik.http.routers.https-whoami.tls=true"
      - "traefik.http.routers.https-whoami.tls.certResolver=le-main"
      #- "traefik.http.routers.https-whoami.tls.domains[0].main=whoami.maxocull.com"

  #watchtower:
    ## TODO: Not recommended by LinuxServer.io
    #image: containrrr/watchtower
    #container_name: watchtower
    #environment:
      #- PUID=1000
      #- PGID=1000
      #- TZ=America/Indianapolis
      #- WATCHTOWER_CLEANUP=true
      ##- WATCHTOWER_SCHEDULE='0 0 4 * * *' # Every night at 04:00.
      ## TODO: Email notifications (requires SMTP).
      ## https://containrrr.github.io/watchtower/notifications/
    #volumes:
      #- /var/run/docker.sock:/var/run/docker.sock
      ##- /opt/flotilla/config/watchtower/config.json:/config.json:z
    #restart: unless-stopped

  pihole:
    image: pihole/pihole
    container_name: pihole
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "67:67/udp"
      - "127.0.0.1:1188:80/tcp"
      - "127.0.0.1:2443:443/tcp"
    env_file:
      - /opt/flotilla/secrets.env
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
      - "DNS1=84.200.69.80"  # DNS.WATCH servers, with DNSSEC enabled.
      - "DNS2=84.200.70.40"
      - "DNSSEC=True"
      #- "ServerIP=107.217.95.124" # Only required for DHCP.
    volumes:
      - /opt/flotilla/config/pihole/pihole:/etc/pihole:z
      - /opt/flotilla/config/pihole/dnsmasq:/etc/dnsmasq.d:z
    dns:
      - 127.0.0.1
      - 84.200.69.80
    #cap_add: # DHCP only.
      #- NET_ADMIN
    #deploy:
      #resources:
        #limits:
          #memory: "1.6g"
    restart: unless-stopped

  openvpn:
    image: kylemanna/openvpn
    container_name: openvpn
    #privileged: true # Necessary for sysctl net settings.
    # TODO: Test that these work.
    sysctls:
      - "net.ipv4.ip_forward=1"
      - "net.ipv6.conf.all.disable_ipv6=0"
      - "net.ipv6.conf.default.forwarding=1"
      - "net.ipv6.conf.all.forwarding=1"
    #cap_add:
      #- NET_ADMIN
    volumes:
      - /opt/flotilla/config/openvpn:/etc/openvpn:z
    environment:
      - EASYRSA_KEY_SIZE=4096
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
    ports:
      - "1194:1194/udp"
    restart: unless-stopped

  jackett:
    image: linuxserver/jackett
    container_name: jackett
    depends_on:
      - cleanroom
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
      - RUN_OPTS="--ProxyConnection=cleanroom:8118"
    volumes:
      - /opt/flotilla/config/jackett:/config:z
      - /opt/flotilla/data/all/torrents:/downloads:z
    ports:
      - "127.0.0.1:9117:9117"
    #deploy:
      #resources:
        #limits:
          #memory: "1.2g"
    restart: unless-stopped

  cleanroom:
    image: binhex/arch-qbittorrentvpn
    container_name: cleanroom
    privileged: true # Necessary for iptables killswitch.
    cap_add:
      - NET_ADMIN
    env_file:
      - /opt/flotilla/secrets.env
    environment:
      - WEBUI_PORT=8800
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
      - UMASK=000
      - DEBUG=false
      - NAME_SERVERS=128.52.130.209,169.239.202.202,84.200.69.80,84.200.70.40,91.239.100.100,89.233.43.71,37.235.1.174,37.235.1.177,1.1.1.1,1.0.0.1
      - LAN_NETWORK=192.168.0.0/16
      - ENABLE_PRIVOXY=yes
      - VPN_ENABLED=yes
      - VPN_PROV=nordvpn # This is a custom VPN.
    volumes:
      - /opt/flotilla/config/cleanroom:/config:z
      - /opt/flotilla/data/all/torrents:/torrents:z
      - /opt/flotilla/data/cleanroom:/data:z
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "6881:6881"
      - "6881:6881/udp"
      - "127.0.0.1:8800:8800" # Change the WEBUI_PORT environment variable as well!
      - "127.0.0.1:8118:8118" # Change the proxy port for Jackett as well!
    #deploy:
      #resources:
        #limits:
          #memory: "4g"
    restart: unless-stopped

  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    depends_on:
      - cleanroom
      - jackett
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
      - UMASK=022
    volumes:
      - /opt/flotilla/config/sonarr:/config:z
      - /opt/flotilla/data/all/tvshows:/tv:z
      - /opt/flotilla/data/cleanroom:/data:z
    ports:
      - "127.0.0.1:8989:8989"
    #deploy:
      #resources:
        #limits:
          #memory: "4g"
    restart: unless-stopped

  radarr:
    image: linuxserver/radarr
    container_name: radarr
    depends_on:
      - cleanroom
      - jackett
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
      - UMASK=022
    volumes:
      - /opt/flotilla/config/radarr:/config:z
      - /opt/flotilla/data/all/movies:/movies:z
      - /opt/flotilla/data/cleanroom:/data:z
    ports:
      - "127.0.0.1:7878:7878"
    #deploy:
      #resources:
        #limits:
          #memory: "4g"
    restart: unless-stopped

  lidarr:
    image: linuxserver/lidarr
    container_name: lidarr
    depends_on:
      - cleanroom
      - jackett
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
      - UMASK=022
    volumes:
      - /opt/flotilla/config/lidarr:/config:z
      - /opt/flotilla/data/all/music:/music:z
      - /opt/flotilla/data/cleanroom:/data:z
    ports:
      - "127.0.0.1:8686:8686"
    #deploy:
      #resources:
        #limits:
          #memory: "4g"
    restart: unless-stopped

  jellyfin:
    image: linuxserver/jellyfin
    container_name: jellyfin
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
      - UMASK_SET=<022> #optional
    volumes:
      - /opt/flotilla/config/jellyfin:/config:z
      - /opt/flotilla/data/all/tvshows:/data/tvshows:z
      - /opt/flotilla/data/all/movies:/data/movies:z
      - /opt/flotilla/data/all/music:/data/music:z
      - /opt/flotilla/data/all/books:/data/books:z # Intended for audio books.
      - /opt/flotilla/data/all/photos:/data/photos:z
      - /opt/flotilla/data/jellyfin/transcode:/transcode:z #optional
    ports:
      - "127.0.0.1:8096:8096"
      #- "8920:8920" #optional, https
    devices:
      - /dev/dri:/dev/dri #optional, for video HW acceleration
    #deploy:
      #resources:
        #limits:
          #memory: "6g"
    restart: unless-stopped

  postgres:
    image: postgres
    container_name: postgres
    env_file:
      - /opt/flotilla/secrets.env
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
      #- POSTGRES_USER=harbor # Use the default "postgres" user.
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - /opt/flotilla/data/postgres:/var/lib/postgresql/data:z
    #deploy:
      #resources:
        #limits:
          #memory: "4g"
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    env_file:
      - /opt/flotilla/secrets.env
    depends_on:
      - postgres
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
      # The email below _is_ the username.
      - PGADMIN_DEFAULT_EMAIL=postgres@maxocull.com
    ports:
      - "127.0.0.1:5480:80"
    volumes:
      #- /opt/flotilla/config/pgadmin:/pgadmin4:z
      - /opt/flotilla/data/pgadmin:/var/lib/pgadmin:z
    #deploy:
      #resources:
        #limits:
          #memory: "1.2g"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=PathPrefix(`/pgadmin`)"
      - "traefik.http.routers.pgadmin.entryPoints=http"
      - "traefik.http.middlewares.strip-pgadmin.stripPrefix.prefixes=pgadmin"
      - "traefik.http.routers.pgadmin.middlewares=strip-pgadmin"

  redis:
    # TODO: Resolve some kernel settings to clear up the logs.
    image: redis
    container_name: redis
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - /opt/flotilla/data/redis:/data:z # Remove this line if not persistent.
    #deploy:
      #resources:
        #limits:
          #memory: "4g"
    restart: unless-stopped

  nextcloud:
    # Switch to FPM after reverse proxy is set up.
    # Or not because FPM requires hosting files on nginx (ick).
    image: nextcloud
    container_name: nextcloud
    depends_on:
      - redis
      - postgres
      - nextcloud-cron
    env_file:
      - /opt/flotilla/secrets.env
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_HOST=postgres
      - NEXTCLOUD_ADMIN_USER=entourage
      - REDIS_HOST=redis
      - SMTP_HOST=smtp.gmail.com
      - SMTP_SECURE=tls
      - SMTP_PORT=465
      - SMTP_NAME=maxocull.com
      - MAIL_FROM_ADDRESS=maxocull.com@gmail.com
      #- MAIL_DOMAIN=mail.maxocull.com
    volumes:
      - /opt/flotilla/config/nextcloud:/var/www/html/config:z
      - /opt/flotilla/data/nextcloud:/var/www/html:z # Share this folder with cron.
      #- /opt/flotilla/data/all/books:/external/books:z
    ports:
      - "127.0.0.1:3080:80"
      #- "3090:9000" # for FPM
    #deploy:
      #resources:
        #limits:
          #memory: "2.4g"
    restart: unless-stopped

  nextcloud-cron:
    # https://github.com/nextcloud/docker/issues/134
    image: nextcloud
    container_name: nextcloud-cron
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
    entrypoint: /cron.sh
    volumes:
      - /opt/flotilla/config/nextcloud:/var/www/html/config:z
      - /opt/flotilla/data/nextcloud:/var/www/html:z # Share this folder with cron.
    #deploy:
      #resources:
        #limits:
          #memory: "40m"
    restart: unless-stopped

  collabora:
    image: collabora/code
    container_name: collabora
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
      - "domain=cloud\\.maxocull\\.com|cloud\\.maxocull\\.net"
      - "dictionaries=en"
    volumes:
      - /opt/flotilla/config/nextcloud:/var/www/html/config:z
      - /opt/flotilla/data/nextcloud:/var/www/html:z
    ports:
      - "127.0.0.1:9980:9980"
    cap_add:
      - MKNOD
    #deploy:
      #resources:
        #limits:
          #memory: "4g"
    restart: unless-stopped

  gitlab:
    image: sameersbn/gitlab
    container_name: gitlab
    env_file:
      - /opt/flotilla/secrets.env
    depends_on:
      - redis
      - postgres
      - registry
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
      - DB_HOST=postgres
      - DB_NAME=gitlabhq_production
      - DB_USER=gitlab
      - DB_EXTENSION=pg_trgm
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NGINX_MAX_UPLOAD_SIZE=250M
      - GITLAB_HOST=git.maxocull.com
      - GITLAB_NOTIFY_ON_BROKEN_BUILDS=true
      #- SMTP_ENABLED=true # Flip on after the mail server is setup.
      #- IMAP_ENABLED=true # Flip on after the mail server is setup.
      - "IMAP_USER=maxocull.com@gmail.com"
      - "GITLAB_INCOMING_EMAIL_ADDRESS=maxocull.com+%{key}@gmail.com"
      #- IMAP_DOMAIN=www.maxocull.com
      #- IMAP_HOST=mail.maxocull.com
      #- IMAP_PORT=993
      #- PIWIK_URL=
      #- PIWIK_SITE_ID=
      - GITLAB_REGISTRY_ENABLED=true
      - GITLAB_REGISTRY_HOST=registry.maxocull.com
      - GITLAB_REGISTRY_PORT=443
      - GITLAB_REGISTRY_API_URL=http://registry:5000
      - GITLAB_REGISTRY_KEY_PATH=/certs/live/maxocull.com/privkey.pem
      #- GITLAB_REGISTRY_KEY_PATH=/certs/registry.key
    volumes:
      - /opt/flotilla/data/gitlab:/home/git/data:z
      #- /home/git/.ssh/authorized_keys:/home/git/data/.ssh/authorized_keys:z
      - /home/git/.ssh/authorized_keys_proxy:/home/git/data/.ssh/authorized_keys_proxy:z
      - /opt/flotilla/data/letsencrypt/keys:/certs:z
      #- /opt/flotilla/config/registry/certs:/certs:z
    ports:
      # Keep this as a string because I guess docker-compose (Python) has a bug?
      - "127.0.0.1:4080:80"
      - "127.0.0.1:9922:22"
    restart: unless-stopped

  registry:
    image: registry
    container_name: registry
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
      - REGISTRY_LOG_LEVEL=info
      - REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/registry
      - REGISTRY_AUTH_TOKEN_REALM=https://git.maxocull.com/jwt/auth
      - REGISTRY_AUTH_TOKEN_SERVICE=container_registry
      - REGISTRY_AUTH_TOKEN_ISSUER=gitlab-issuer
      - REGISTRY_AUTH_TOKEN_ROOTCERTBUNDLE=/certs/live/maxocull.com/fullchain.pem
      #- REGISTRY_AUTH_TOKEN_ROOTCERTBUNDLE=/certs/registry.crt
      - REGISTRY_STORAGE_DELETE_ENABLED=true
    volumes:
      - /opt/flotilla/data/gitlab/shared/registry:/registry:z
      - /opt/flotilla/data/letsencrypt/keys:/certs:z
      #- /opt/flotilla/config/registry/certs:/certs:z
    ports:
      - "127.0.0.1:5000:5000"
    restart: unless-stopped

  gitlab-runner:
    image: gitlab/gitlab-runner:alpine
    container_name: gitlab-runner
    depends_on:
      - gitlab
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
      - CI_SERVER_URL=https://git.maxocull.com/
      - REGISTRATION_TOKEN=_WkSofVsJEziYh-ngWar # Change this to whatever the current token is.
    volumes:
      - /opt/flotilla/config/gitlab-runner:/etc/gitlab-runner:z
      - /var/run/docker.sock:/var/run/docker.sock # Behind a reverse proxy, it's okay.
    restart: unless-stopped

  #jenkins:
    # TODO: Opt for Gitlab CI?
    #image: jenkins/jenkins:lts
    #container_name: jenkins
    #environment:
      #- PUID=1000
      #- PGID=1000
      #- TZ=America/Indianapolis
    #volumes:
      #- /opt/flotilla/data/jenkins:/var/jenkins_home:z
      #- /var/run/docker.sock:/var/run/docker.sock # Behind a reverse proxy, it's okay.
    #ports:
      #- "7080:8080"
      #- "50000:50000"
    #restart: unless-stopped

  #postfix:
    #image: mailu/postfix
    #container_name: postfix
    #env_file:
      #- /opt/flotilla/mailu.env
    #environment:
      #- PUID=1000
      #- PGID=1000
      #- TZ=America/Indianapolis
    #volumes:
      #- /opt/flotilla/data/postfix:/data:z
      #- /opt/flotilla/config/postfix:/overrides:z
    #ports:
      #- "25:25"
      #- "10025:10025"

  heimdall:
    image: linuxserver/heimdall
    container_name: heimdall
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
    volumes:
      - /opt/flotilla/config/heimdall:/config:z
    ports:
      - "127.0.0.1:1080:80"
      - "127.0.0.1:1443:443"
    #deploy:
      #resources:
        #limits:
          #memory: "400m"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.http-dash.rule=Host(`dash.maxocull.com`)"
      - "traefik.http.routers.http-dash.entryPoints=http"
      - "traefik.http.routers.https-dash.rule=Host(`dash.maxocull.com`)"
      - "traefik.http.routers.https-dash.entryPoints=https"
      - "traefik.http.routers.https-dash.tls=true"
      - "traefik.http.routers.https-dash.tls.certResolver=le-main"
      #- "traefik.http.routers.https-dash.tls.domains[0].main=dash.maxocull.com"

  grafana:
    image: grafana/grafana
    container_name: grafana
    user: "1000"
    env_file:
      - /opt/flotilla/secrets.env
    depends_on:
      - prometheus
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
      - "GF_SECURITY_ADMIN_USER=entourage"
      - "GF_SERVER_DOMAIN=grafana.maxocull.com"
      - "GF_SERVER_ROOT_URL=https://grafana.maxocull.com"
      - "GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-pie-chart-panel"
    volumes:
      - /opt/flotilla/config/grafana:/etc/grafana:z
      - /opt/flotilla/data/grafana/data:/var/lib/grafana:z
      #- /opt/flotilla/data/grafana/home:/usr/share/grafana:z
      - /opt/flotilla/data/grafana/logs:/var/log/grafana:z
    ports:
      - "127.0.0.1:3000:3000"
    restart: unless-stopped

  loki:
    image: grafana/loki
    container_name: loki
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
    ports:
      - "3100:3100"
    #command:
      #- '--config.file=/etc/loki/local-config.yml'
    restart: unless-stopped

  promtail:
    image: grafana/promtail
    container_name: promtail
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
    volumes:
      - /opt/flotilla/data/all/logs:/var/log:z
    #command:
      #- '--config.file=/etc/promtail/docker-config.yml'
    restart: unless-stopped

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    user: "1000"
    depends_on:
      - nodeexporter
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
    volumes:
      - /opt/flotilla/config/prometheus:/etc/prometheus:z
      - /opt/flotilla/data/prometheus:/prometheus:z
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "127.0.0.1:9095:9090" # conflicts with Fedora's Cockpit at 9090
    restart: unless-stopped

  nodeexporter:
    image: quay.io/prometheus/node-exporter
    container_name: nodeexporter
    cap_add:
      - SYS_TIME
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
    volumes:
      - /:/host:ro,rslave
    command:
      - '--path.rootfs=/host'
    ports:
      - "127.0.0.1:9100:9100"
    restart: unless-stopped

  portainer:
    image: portainer/portainer
    container_name: portainer
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Behind a reverse proxy, it's okay.
      - /opt/flotilla/data/portainer:/data:z
    ports:
      - "127.0.0.1:9000:9000"
      - "127.0.0.1:9001:9001"
    restart: unless-stopped

  #nginx:
    #image: linuxserver/nginx
    #container_name: nginx
    #environment:
      #- PUID=1000
      #- PGID=1000
      #- TZ=America/Indianapolis
      #- URL=maxocull.com
      #- SUBDOMAINS=www,cdn,cloud,alan
      #- VALIDATION=http # DNS? so can use wildcards
      ##- DNSPLUGIN=cloudflare #optional
      ##- DUCKDNSTOKEN=<token> #optional
      #- EMAIL=max.ocull@protonmail.com #optional
      #- DHLEVEL=4096 #optional
      #- ONLY_SUBDOMAINS=false #optional
      ##- EXTRA_DOMAINS=<extradomains> #optional
      #- STAGING=false
    #volumes:
      #- /opt/flotilla/config/nginx:/config:z
      #- /opt/flotilla/data/all/logs/nginx:/config/log:z
    #ports:
      #- "80:80"
      #- "443:443"
    #restart: unless-stopped

  morty:
    image: dalf/morty
    container_name: morty
    cap_drop:
      - ALL
    env_file:
      - /opt/flotilla/secrets.env
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
    ports:
      - "127.0.0.1:4040:3000"
    restart: unless-stopped

  searx:
    image: searx/searx
    container_name: searx
    privileged: true # Necessary for docker access.
    cap_drop:
      - ALL
    cap_drop:
      - CHOWN
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    depends_on:
      - morty
    env_file:
      - /opt/flotilla/secrets.env
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
      - BASE_URL=https://search.maxocull.com/
      - MORTY_URL=http://morty/
    volumes:
      - /opt/flotilla/config/searx:/etc/searx:z
    ports:
      - "127.0.0.1:4050:8080"
    restart: unless-stopped

  graphhopper:
    image: graphhopper/graphhopper
    container_name: graphhopper
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
    volumes:
      - /opt/flotilla/data/graphhopper:/data:z
    ports:
      - "127.0.0.1:8999:8989"
    #deploy:
      #resources:
        #limits:
          #memory: "1.2g"
    restart: unless-stopped

  calibre:
    image: linuxserver/calibre-web
    container_name: calibre
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
      - DOCKER_MODS=linuxserver/calibre-web:calibre # x86_64 only
    volumes:
      - /opt/flotilla/config/calibre:/config:Z
      - /opt/flotilla/data/all/books:/books:z
    ports:
      - "127.0.0.1:8083:8083"
    restart: unless-stopped

  lazylibrarian:
    image: linuxserver/lazylibrarian
    container_name: lazylibrarian
    depends_on:
      - cleanroom
      - jackett
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Indianapolis
      - DOCKER_MODS=linuxserver/calibre-web:calibre # x86_64 only
    volumes:
      - /opt/flotilla/config/lazylibrarian:/config:Z
      - /opt/flotilla/data/cleanroom:/downloads:z
      - /opt/flotilla/data/all/books:/books:z
    ports:
      - "127.0.0.1:5299:5299"
    restart: unless-stopped

  mayan:
    image: mayanedms/mayanedms
    container_name: mayan
    depends_on:
      - postgres
      - redis
    env_file:
      - /opt/flotilla/secrets.env
    environment:
      - MAYAN_USER_UID=1000
      - MAYAN_USER_GID=1000
      - TZ=America/Indianapolis
      - MAYAN_DATABASE_ENGINE=django.db.backends.postgresql
      - MAYAN_DATABASE_HOST=postgres
      - MAYAN_DATABASE_NAME=mayan
      - MAYAN_DATABASE_USER=mayan
      - MAYAN_CELERY_BROKER_URL=redis://redis:6379
      - MAYAN_CELERY_RESULT_BACKEND=redis://redis:6379
      - MAYAN_WORKER_FAST_CONCURRENCY=0 # Use all threads, defaults to 1.
      - MAYAN_WORKER_MEDIUM_CONCURRENCY=0 # Use all threads, defaults to 1.
      - MAYAN_WORKER_SLOW_CONCURRENCY=0 # Use all threads, defaults to 1.
      #- MAYAN_APT_INSTALLS="tesseract-ocr-deu tesseract-ocr-spa"
      #- MAYAN_PIP_INSTALLS="" # redis is already installed
    volumes:
      - /opt/flotilla/data/mayan:/var/lib/mayan:z
    ports:
      - "127.0.0.1:7980:8000"
    restart: unless-stopped

  minecraft:
    # docker exec minecraft rcon-cli stop
    # docker exec minecraft rcon-cli stop
    image: itzg/minecraft-server
    container_name: minecraft
    environment:
      - UID=1000
      - GID=1000
      - TZ=America/Indianapolis
      - VERSION=1.15.1
      - EULA=TRUE
      #- CONSOLE=FALSE
      - GUI=FALSE
      - MEMORY=4G
      - "JVM_XX_OPTS=-XX:+UseG1GC -XX:G1HeapRegionSize=32M -XX:+UnlockExperimentalVMOptions -XX:MaxGCPauseMillis=50 -XX:TargetSurvivorRatio=90 -XX:G1NewSizePercent=50 -XX:G1MaxNewSizePercent=80 -XX:+ParallelRefProcEnabled -XX:CodeCacheExpansionSize=1M -XX:InitialCodeCacheSize=32M -XX:ReservedCodeCacheSize=64M -XX:-TieredCompilation -XX:BackEdgeThreshold=10000 -XX:CompileThreshold=1000 -XX:CICompilerCount=16 -XX:CompilerThreadPriority=3 -XX:FreqInlineSize=325 -XX:InlineSmallCode=2000 -XX:MaxInlineSize=1024"
      # These below are only used if server.properties doesn't already exist.
      - SERVER_NAME=maxocull.com
      - MOTD=Welcome to maxocull.com!
      - DIFFICULTY=hard
      - OPS=Maxattax,MasterAlan2001,houndeyex
      - "ICON=https://www.gravatar.com/avatar/7143b51c5a72389622b31375e5e91b5b"
      - MAX_PLAYERS=50
      - ALLOW_NETHER=true
      - ANNOUNCE_PLAYER_ACHIEVEMENTS=true
      - ENABLE_COMMAND_BLOCK=true
      - FORCE_GAMEMODE=false
      - GENERATE_STRUCTURES=true
      - HARDCORE=false
      - SPAWN_ANIMALS=true
      - SPAWN_MONSTERS=true
      - SPAWN_NPCS=true
      - SPAWN_PROTECTION=128
      - VIEW_DISTANCE=14
      - MODE=survival
      - PVP=true
      - LEVEL_TYPE=AMPLIFIED
      - LEVEL=world
      - ALLOW_FLIGHT=false
    volumes:
      - /opt/flotilla/data/minecraft:/data:Z
    ports:
      - "25565:25565"
    restart: unless-stopped
